{
  "description": "Job to monitorize key entities on BeDF Health for TS entities",
  "beID": "44fe91684fef8a40e_545569617",
  "code": "MONITOR KEY TS ENTITIES",
  "profiles": [
    "ACCESS_MANAGEMENT"
  ],
  "type": 12,
  "active": true,
  "customTags": [
    "bedf_status",
    "gb",
    "gi",
    "gt"
  ],
  "geolocation": {
    "lng": "-78.6390989",
    "lat": "35.7803977"
  },
  "isaTags": [],
  "id": "MONITOR_KEY_TS_ENTITIES",
  "triggeringType": "cron",
  "triggers": [
    {
      "id": "GT_TS",
      "description": "GT Time series Entities Logs",
      "expression": {
        "k": true
      },
      "action": {
        "beID": "Z_TEST_ALS_API;2",
        "value": {
          "fn": "PYTHON_V3.11",
          "arg": [
            "'''To debug outside of platform\nfrom args import args\nimport os\nfrom bigfinite_api_client.api_simul import api\nos.environ[\"AIZON_ENVIRONMENT\"] = \"grifols\"\n'''\n\nfrom datetime import datetime, timezone\n\nseconds_days_array = args[0]\nentity_type_array = args[1]\nnow = int(datetime.now().timestamp() * 1000)\n\n# Start the lists\ndays_alarm_result = []\nret = []\ntype_number = []\n\n# Loop args[0] elements\nfor i, entity_type in enumerate(entity_type_array):\n    parts = entity_type.split(\";\")\n    entity_name = parts[0]\n\n    # Get the entity name and entity type from argument\n    if parts[1] == \"2\":\n        type_string = \"elements\"\n    elif parts[1] == \"3\":\n        type_string = \"devices\"\n    elif parts[1] == \"20\":\n        type_string = \"virtual-entities\"\n    else:\n        type_string = \"elements\"\n\n    # Get the last value using the API\n    # last_timestamp = api(f'/{type_string}/{entity_name}/last-values','GET')['json']['lastTimestamp']\n\n    # try/except block to catch api errors\n\n    try:\n        api_result = api(f\"/{type_string}/{entity_name}/last-values\", \"GET\")\n\n        description = api(f\"{type_string}/{entity_name}\", \"GET\")[\"json\"][\"description\"]\n\n        # Verify if the response status is 200\n        if api_result[\"status\"] in [200, 201]:\n            last_timestamp = api_result[\"json\"][\"lastTimestamp\"]\n\n            # time_before = time_before_array[i]*3600*24*1000\n            # Pass alarms to miliseconds\n            alarm_miliseconds = seconds_days_array[i] * 1000\n\n            # start_timestamp = last_timestamp - time_before\n            # path = f\"/{type_string}/{entity_name}/values\"\n            # qparams = f\"?startDate={start_timestamp}&endDate={last_timestamp}\"\n\n            # last_values = len(api(path+qparams, \"GET\")[\"json\"][\"_embedded\"][\"items\"])\n            # Build the out dict.\n            ret.append(\n                {\n                    f\"{entity_name};{parts[1]}\": {\n                        \"seconds_alarm\": ((now - alarm_miliseconds) > last_timestamp),\n                        \"last_timestamp\": datetime.fromtimestamp(\n                            (last_timestamp / 1000), tz=timezone.utc\n                        ).isoformat(),\n                        \"seconds_before_setting\": seconds_days_array[i],\n                        \"api_status\": \"OK\",\n                        \"description\": description,\n                        # f\"last_{time_before_array[i]}_days_values\": last_values\n                    }\n                }\n            )\n        else:\n            ret.append(\n                {\n                    f\"{entity_name};{parts[1]}\": {\n                        \"seconds_alarm\": \"N/A\",\n                        \"last_timestamp\": \"N/A\",\n                        \"seconds_before_setting\": \"N/A\",\n                        \"api_status\": \"KO\",\n                        \"description\": description,\n                    }\n                }\n            )\n    except Exception:\n        ret.append(\n            {\n                f\"{entity_name};{parts[1]}\": {\n                    \"seconds_alarm\": \"N/A\",\n                    \"last_timestamp\": \"N/A\",\n                    \"seconds_before_setting\": \"N/A\",\n                    \"api_status\": \"KO\",\n                    \"description\": \"N/A\",\n                }\n            }\n        )\n\nreturn ret\n#print(ret)\n",
            {
              "op": "[]",
              "arg": [
                {
                  "op": "[]",
                  "arg": [
                    30
                  ]
                },
                {
                  "op": "[]",
                  "arg": [
                    "GT_GC_NFB_BUFFER_PREP_PC_NFB_BUFFER_71R114_TIC01;3"
                  ]
                }
              ]
            }
          ]
        },
        "actionType": "newValue"
      }
    }
  ],
  "cron": "0 */2 * * *",
  "_links": {
    "self": {
      "href": "/agents/MONITOR_KEY_TS_ENTITIES"
    }
  }
}